{"version":3,"file":"static/js/248.d9f186a1.chunk.js","mappings":"uLAEaA,E,QAAgBC,GAAAA,QAAc,mE,SCA3C,ECKoC,SAAH,GAA6B,IAAvBC,EAAQ,EAARA,SAAUC,EAAK,EAALA,MAC/C,OACE,SAACH,EAAa,WACZ,UAACI,EAAA,EAAS,WACPD,IACC,SAACE,EAAA,EAAU,CACTC,QAAQ,KACRC,GAAI,CAAEC,aAAc,OAAQC,UAAW,UAAW,SAEjDN,IAGJD,MAIT,C,gNCdMQ,EAAmBC,EAAAA,GAAW,CAClCC,MAAOD,EAAAA,KAAaC,MAAM,iBAAiBC,SAAS,qBACpDC,SAAUH,EAAAA,KAAaE,SAAS,0BAQ5BE,EAA4B,CAChCH,MAAO,GACPE,SAAU,IAuDZ,EApD4B,WAC1B,IAAME,GAAWC,EAAAA,EAAAA,KACXC,GAAYC,EAAAA,EAAAA,IAAYC,EAAAA,IACxBC,GAASC,EAAAA,EAAAA,IAAU,CACvBP,cAAAA,EACAL,iBAAAA,EACAa,SAAS,WAAD,8BAAE,WAAOC,GAAM,sEACrBR,GAASS,EAAAA,EAAAA,IAAMD,IAAQ,2CACxB,mDAFQ,KAKX,OACE,UAACE,EAAA,EAAG,CACFC,UAAU,OACVpB,GAAI,CACFqB,QAAS,OACTC,cAAe,SACfC,IAAK,OACLC,MAAO,CAAEC,GAAI,OAAQC,GAAI,SACzBC,OAAQ,SACRC,QAAS,QAEXZ,SAAUF,EAAOe,aAAa,WAE9B,SAACC,EAAA,EAAS,CACRC,GAAG,QACHC,MAAM,QACNjC,QAAQ,WACRkC,MAAOnB,EAAOG,OAAOZ,MACrB6B,SAAUpB,EAAOqB,aACjBC,OAAQtB,EAAOuB,WACfC,MAAOxB,EAAOyB,QAAQlC,OAASmC,QAAQ1B,EAAO2B,OAAOpC,OACrDqC,WAAY5B,EAAOyB,QAAQlC,OAASS,EAAO2B,OAAOpC,SAEpD,SAACyB,EAAA,EAAS,CACRC,GAAG,WACHC,MAAM,WACNW,KAAK,WACL5C,QAAQ,WACRkC,MAAOnB,EAAOG,OAAOV,SACrB2B,SAAUpB,EAAOqB,aACjBC,OAAQtB,EAAOuB,WACfC,MAAOxB,EAAOyB,QAAQhC,UAAYiC,QAAQ1B,EAAO2B,OAAOlC,UACxDmC,WAAY5B,EAAOyB,QAAQhC,UAAYO,EAAO2B,OAAOlC,YAEvD,SAACqC,EAAA,EAAM,CAACD,KAAK,SAAS5C,QAAQ,YAAY8C,SAAUlC,EAAU,SAAC,YAKrE,ECxEA,ICAA,ECEkB,WAChB,OACE,SAACmC,EAAA,EAAO,WACN,SAAC,EAAS,KAGhB,C","sources":["components/Section/Section.styled.ts","components/Section/index.ts","components/Section/Section.tsx","pages/LoginPage/LoginForm/LoginForm.tsx","pages/LoginPage/LoginForm/index.ts","pages/LoginPage/index.ts","pages/LoginPage/LoginPage.tsx"],"sourcesContent":["import styled from \"styled-components\"\n\nexport const SectionStyled = styled.section`\n  padding: 100px 0;\n  min-height: 100vh;\n`\n","import Section from \"./Section\"\n\nexport default Section\n","import { Container, Typography } from \"@mui/material\"\nimport React, { ReactNode } from \"react\"\nimport { SectionStyled } from \"./Section.styled\"\ninterface ISection {\n  children: ReactNode\n  title?: string\n}\nconst Section: React.FC<ISection> = ({ children, title }) => {\n  return (\n    <SectionStyled>\n      <Container>\n        {title && (\n          <Typography\n            variant='h2'\n            sx={{ marginBottom: \"20px\", textAlign: \"center\" }}\n          >\n            {title}\n          </Typography>\n        )}\n        {children}\n      </Container>\n    </SectionStyled>\n  )\n}\n\nexport default Section\n","import React from \"react\"\nimport { TextField, Button, Box } from \"@mui/material\"\nimport { useFormik } from \"formik\"\nimport { useSelector } from \"react-redux\"\nimport * as yup from \"yup\"\nimport { useAppDispatch } from \"../../../hooks/useReduxWithType\"\nimport { login } from \"../../../redux/auth/authOperations\"\nimport { selectLoading } from \"../../../redux/auth/authSelectors\"\n\nconst validationSchema = yup.object({\n  email: yup.string().email(\"Invalid email\").required(\"Email is required\"),\n  password: yup.string().required(\"Password is required\"),\n})\n\ninterface FormValues {\n  email: string\n  password: string\n}\n\nconst initialValues: FormValues = {\n  email: \"\",\n  password: \"\",\n}\n\nconst LoginForm: React.FC = () => {\n  const dispatch = useAppDispatch()\n  const isLoading = useSelector(selectLoading)\n  const formik = useFormik({\n    initialValues,\n    validationSchema,\n    onSubmit: async (values) => {\n      dispatch(login(values))\n    },\n  })\n\n  return (\n    <Box\n      component='form'\n      sx={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        gap: \"20px\",\n        width: { xs: \"100%\", sm: \"608px\" },\n        margin: \"0 auto\",\n        padding: \"20px\",\n      }}\n      onSubmit={formik.handleSubmit}\n    >\n      <TextField\n        id='email'\n        label='Email'\n        variant='outlined'\n        value={formik.values.email}\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        error={formik.touched.email && Boolean(formik.errors.email)}\n        helperText={formik.touched.email && formik.errors.email}\n      />\n      <TextField\n        id='password'\n        label='Password'\n        type='password'\n        variant='outlined'\n        value={formik.values.password}\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        error={formik.touched.password && Boolean(formik.errors.password)}\n        helperText={formik.touched.password && formik.errors.password}\n      />\n      <Button type='submit' variant='contained' disabled={isLoading}>\n        Login\n      </Button>\n    </Box>\n  )\n}\n\nexport default LoginForm\n","import LoginForm from \"./LoginForm\"\n\nexport default LoginForm\n","import LoginPage from \"./LoginPage\"\n\nexport default LoginPage\n","import React from \"react\"\nimport Section from \"../../components/Section\"\nimport LoginForm from \"./LoginForm\"\n\nconst LoginPage = () => {\n  return (\n    <Section>\n      <LoginForm />\n    </Section>\n  )\n}\n\nexport default LoginPage\n"],"names":["SectionStyled","styled","children","title","Container","Typography","variant","sx","marginBottom","textAlign","validationSchema","yup","email","required","password","initialValues","dispatch","useAppDispatch","isLoading","useSelector","selectLoading","formik","useFormik","onSubmit","values","login","Box","component","display","flexDirection","gap","width","xs","sm","margin","padding","handleSubmit","TextField","id","label","value","onChange","handleChange","onBlur","handleBlur","error","touched","Boolean","errors","helperText","type","Button","disabled","Section"],"sourceRoot":""}