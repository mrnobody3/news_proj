{"version":3,"file":"static/js/417.bc762e4a.chunk.js","mappings":"uLAEaA,E,QAAgBC,GAAAA,QAAc,6C,SCA3C,ECKoC,SAAH,GAA6B,IAAvBC,EAAQ,EAARA,SAAUC,EAAK,EAALA,MAC/C,OACE,SAACH,EAAa,WACZ,UAACI,EAAA,EAAS,WACPD,IACC,SAACE,EAAA,EAAU,CACTC,QAAQ,KACRC,GAAI,CAAEC,aAAc,OAAQC,UAAW,UAAW,SAEjDN,IAGJD,MAIT,C,oECpBaQ,EAAiB,WAAH,OAASC,EAAAA,EAAAA,KAA0B,C,wMCDjDC,E,QAAaX,GAAAA,KAAW,yI,SCQ/BY,EAAmBC,EAAAA,GAAW,CAClCC,KAAMD,EAAAA,KAAaE,SAAS,oBAC5BC,MAAOH,EAAAA,KAAaG,MAAM,iBAAiBD,SAAS,qBACpDE,SAAUJ,EAAAA,KAEPE,SAAS,wBACTG,IAAI,EAAG,4CAcNC,EAA4B,CAChCL,KAAM,GACNE,MAAO,GACPC,SAAU,IAwEZ,EApE+B,WAC7B,IAAMG,GAAWX,EAAAA,EAAAA,KACXY,GAAYC,EAAAA,EAAAA,IAAYC,EAAAA,IACxBC,GAASC,EAAAA,EAAAA,IAAU,CACvBN,cAAAA,EACAP,iBAAAA,EACAc,SAAS,WAAD,8BAAE,WAAOC,GAAM,sEACrBP,GAASQ,EAAAA,EAAAA,GAASD,IAClBH,EAAOK,YAAW,2CACnB,mDAHQ,KAMX,OACE,UAAClB,EAAU,CAACe,SAAUF,EAAOM,aAAa,WACxC,SAACC,EAAA,EAAS,CACRC,GAAG,OACHC,MAAM,OACN5B,QAAQ,WACR6B,MAAOV,EAAOG,OAAOb,KACrBqB,SAAUX,EAAOY,aACjBC,OAAQb,EAAOc,WACfC,MAAOf,EAAOgB,QAAQ1B,MAAQ2B,QAAQjB,EAAOkB,OAAO5B,MACpD6B,WAAYnB,EAAOgB,QAAQ1B,MAAQU,EAAOkB,OAAO5B,QAEnD,SAACiB,EAAA,EAAS,CACRC,GAAG,QACHC,MAAM,QACN5B,QAAQ,WACR6B,MAAOV,EAAOG,OAAOX,MACrBmB,SAAUX,EAAOY,aACjBC,OAAQb,EAAOc,WACfC,MAAOf,EAAOgB,QAAQxB,OAASyB,QAAQjB,EAAOkB,OAAO1B,OACrD2B,WAAYnB,EAAOgB,QAAQxB,OAASQ,EAAOkB,OAAO1B,SAEpD,SAACe,EAAA,EAAS,CACRC,GAAG,WACHC,MAAM,WACNW,KAAK,WACLvC,QAAQ,WACR6B,MAAOV,EAAOG,OAAOV,SACrBkB,SAAUX,EAAOY,aACjBC,OAAQb,EAAOc,WACfC,MAAOf,EAAOgB,QAAQvB,UAAYwB,QAAQjB,EAAOkB,OAAOzB,UACxD0B,WAAYnB,EAAOgB,QAAQvB,UAAYO,EAAOkB,OAAOzB,YAkBvD,SAAC4B,EAAA,EAAM,CAACD,KAAK,SAASvC,QAAQ,YAAYyC,SAAUzB,EAAU,SAAC,eAKrE,ECrGA,ECEqB,WACnB,OACE,SAAC0B,EAAA,EAAO,WACN,SAAC,EAAY,KAGnB,C,wDCRO,IAYMxB,EAAgB,SAACyB,GAAgB,OAAKA,EAAMC,KAAKC,OAAO,C","sources":["components/Section/Section.styled.ts","components/Section/index.ts","components/Section/Section.tsx","hooks/useReduxWithType.ts","pages/RegisterPage/RegisterForm/RegisterForm.styled.ts","pages/RegisterPage/RegisterForm/RegisterForm.tsx","pages/RegisterPage/index.ts","pages/RegisterPage/RegisterPage.tsx","redux/auth/authSelectors.ts"],"sourcesContent":["import styled from 'styled-components'\n\nexport const SectionStyled = styled.section`\n  padding: 100px 0;\n`\n","import Section from './Section'\n\nexport default Section\n","import { Container, Typography } from '@mui/material'\nimport React, { ReactNode } from 'react'\nimport { SectionStyled } from './Section.styled'\ninterface ISection {\n  children: ReactNode\n  title?: string\n}\nconst Section: React.FC<ISection> = ({ children, title }) => {\n  return (\n    <SectionStyled>\n      <Container>\n        {title && (\n          <Typography\n            variant='h2'\n            sx={{ marginBottom: '20px', textAlign: 'center' }}\n          >\n            {title}\n          </Typography>\n        )}\n        {children}\n      </Container>\n    </SectionStyled>\n  )\n}\n\nexport default Section\n","import { useDispatch, useSelector, TypedUseSelectorHook } from 'react-redux'\nimport type { RootState, AppDispatch } from '../redux/store'\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector\n","import styled from 'styled-components'\n\nexport const StyledForm = styled.form`\n  width: 608px;\n  margin: 0 auto;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n`\n","import React from 'react'\nimport { TextField, Button } from '@mui/material'\nimport { useFormik } from 'formik'\nimport { useSelector } from 'react-redux'\nimport * as yup from 'yup'\nimport { useAppDispatch } from '../../../hooks/useReduxWithType'\nimport { register } from '../../../redux/auth/authOperations'\nimport { selectLoading } from '../../../redux/auth/authSelectors'\nimport { StyledForm } from './RegisterForm.styled'\n\nconst validationSchema = yup.object({\n  name: yup.string().required('Name is required'),\n  email: yup.string().email('Invalid email').required('Email is required'),\n  password: yup\n    .string()\n    .required('Password is required')\n    .min(8, 'Password must be at least 8 characters'),\n  // confirmPassword: yup\n  //   .string()\n  //   .oneOf([yup.ref('password')], 'Passwords must match')\n  //   .required('Confirm Password is required'),\n})\n\ninterface FormValues {\n  name: string\n  email: string\n  password: string\n  // confirmPassword: string\n}\n\nconst initialValues: FormValues = {\n  name: '',\n  email: '',\n  password: '',\n  // confirmPassword: '',\n}\n\nconst RegisterForm: React.FC = () => {\n  const dispatch = useAppDispatch()\n  const isLoading = useSelector(selectLoading)\n  const formik = useFormik({\n    initialValues,\n    validationSchema,\n    onSubmit: async (values) => {\n      dispatch(register(values))\n      formik.resetForm()\n    },\n  })\n\n  return (\n    <StyledForm onSubmit={formik.handleSubmit}>\n      <TextField\n        id='name'\n        label='Name'\n        variant='outlined'\n        value={formik.values.name}\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        error={formik.touched.name && Boolean(formik.errors.name)}\n        helperText={formik.touched.name && formik.errors.name}\n      />\n      <TextField\n        id='email'\n        label='Email'\n        variant='outlined'\n        value={formik.values.email}\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        error={formik.touched.email && Boolean(formik.errors.email)}\n        helperText={formik.touched.email && formik.errors.email}\n      />\n      <TextField\n        id='password'\n        label='Password'\n        type='password'\n        variant='outlined'\n        value={formik.values.password}\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        error={formik.touched.password && Boolean(formik.errors.password)}\n        helperText={formik.touched.password && formik.errors.password}\n      />\n      {/* <TextField */}\n      {/*  id='confirmPassword' */}\n      {/*  label='Confirm Password' */}\n      {/*  type='password' */}\n      {/*  variant='outlined' */}\n      {/*  value={formik.values.confirmPassword} */}\n      {/*  onChange={formik.handleChange} */}\n      {/*  onBlur={formik.handleBlur} */}\n      {/*  error={ */}\n      {/*    formik.touched.confirmPassword && */}\n      {/*    Boolean(formik.errors.confirmPassword) */}\n      {/*  } */}\n      {/*  helperText={ */}\n      {/*    formik.touched.confirmPassword && formik.errors.confirmPassword */}\n      {/*  } */}\n      {/* /> */}\n      <Button type='submit' variant='contained' disabled={isLoading}>\n        Register\n      </Button>\n    </StyledForm>\n  )\n}\n\nexport default RegisterForm\n","import RegisterPage from './RegisterPage'\n\nexport default RegisterPage\n","import React from 'react'\nimport Section from '../../components/Section'\nimport RegisterForm from './RegisterForm/RegisterForm'\n\nconst RegisterPage = () => {\n  return (\n    <Section>\n      <RegisterForm />\n    </Section>\n  )\n}\n\nexport default RegisterPage\n","import { RootState } from '../store'\n\nexport const selectUserName = (state: RootState) => state.auth.user.name\n\nexport const selectToken = (state: RootState) => state.auth.token\n\nexport const selectIsLoggedIn = (state: RootState) => state.auth.isLoggedIn\n\nexport const selectErrorAuth = (state: RootState) => state.auth.error\n\nexport const selectAvatarUser = (state: RootState) => state.auth.user.avatarUrl\n\nexport const selectUserData = (state: RootState) => state.auth.user\n\nexport const selectLoading = (state: RootState) => state.auth.loading\n"],"names":["SectionStyled","styled","children","title","Container","Typography","variant","sx","marginBottom","textAlign","useAppDispatch","useDispatch","StyledForm","validationSchema","yup","name","required","email","password","min","initialValues","dispatch","isLoading","useSelector","selectLoading","formik","useFormik","onSubmit","values","register","resetForm","handleSubmit","TextField","id","label","value","onChange","handleChange","onBlur","handleBlur","error","touched","Boolean","errors","helperText","type","Button","disabled","Section","state","auth","loading"],"sourceRoot":""}