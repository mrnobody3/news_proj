{"version":3,"file":"static/js/45.54da7737.chunk.js","mappings":"sLAEaA,E,QAAgBC,GAAAA,QAAc,mE,SCA3C,ECKoC,SAAH,GAA6B,IAAvBC,EAAQ,EAARA,SAAUC,EAAK,EAALA,MAC/C,OACE,SAACH,EAAa,WACZ,UAACI,EAAA,EAAS,WACPD,IACC,SAACE,EAAA,EAAU,CACTC,QAAQ,KACRC,GAAI,CAAEC,aAAc,OAAQC,UAAW,UAAW,SAEjDN,IAGJD,MAIT,C,gNCdMQ,EAAmBC,EAAAA,GAAW,CAClCC,KAAMD,EAAAA,KAAaE,SAAS,oBAC5BC,MAAOH,EAAAA,KAAaG,MAAM,iBAAiBD,SAAS,qBACpDE,SAAUJ,EAAAA,KAEPE,SAAS,wBACTG,IAAI,EAAG,4CAcNC,EAA4B,CAChCL,KAAM,GACNE,MAAO,GACPC,SAAU,IAmFZ,EA/E+B,WAC7B,IAAMG,GAAWC,EAAAA,EAAAA,KACXC,GAAYC,EAAAA,EAAAA,IAAYC,EAAAA,IACxBC,GAASC,EAAAA,EAAAA,IAAU,CACvBP,cAAAA,EACAP,iBAAAA,EACAe,SAAS,WAAD,8BAAE,WAAOC,GAAM,sEACrBR,GAASS,EAAAA,EAAAA,IAASD,IAClBH,EAAOK,YAAW,2CACnB,mDAHQ,KAMX,OACE,UAACC,EAAA,EAAG,CACFC,UAAU,OACVvB,GAAI,CACFwB,QAAS,OACTC,cAAe,SACfC,IAAK,OACLC,MAAO,CAAEC,GAAI,OAAQC,GAAI,SACzBC,OAAQ,SACRC,QAAS,QAEXb,SAAUF,EAAOgB,aAAa,WAE9B,SAACC,EAAA,EAAS,CACRC,GAAG,OACHC,MAAM,OACNpC,QAAQ,WACRqC,MAAOpB,EAAOG,OAAOd,KACrBgC,SAAUrB,EAAOsB,aACjBC,OAAQvB,EAAOwB,WACfC,MAAOzB,EAAO0B,QAAQrC,MAAQsC,QAAQ3B,EAAO4B,OAAOvC,MACpDwC,WAAY7B,EAAO0B,QAAQrC,MAAQW,EAAO4B,OAAOvC,QAEnD,SAAC4B,EAAA,EAAS,CACRC,GAAG,QACHC,MAAM,QACNpC,QAAQ,WACRqC,MAAOpB,EAAOG,OAAOZ,MACrB8B,SAAUrB,EAAOsB,aACjBC,OAAQvB,EAAOwB,WACfC,MAAOzB,EAAO0B,QAAQnC,OAASoC,QAAQ3B,EAAO4B,OAAOrC,OACrDsC,WAAY7B,EAAO0B,QAAQnC,OAASS,EAAO4B,OAAOrC,SAEpD,SAAC0B,EAAA,EAAS,CACRC,GAAG,WACHC,MAAM,WACNW,KAAK,WACL/C,QAAQ,WACRqC,MAAOpB,EAAOG,OAAOX,SACrB6B,SAAUrB,EAAOsB,aACjBC,OAAQvB,EAAOwB,WACfC,MAAOzB,EAAO0B,QAAQlC,UAAYmC,QAAQ3B,EAAO4B,OAAOpC,UACxDqC,WAAY7B,EAAO0B,QAAQlC,UAAYQ,EAAO4B,OAAOpC,YAkBvD,SAACuC,EAAA,EAAM,CAACD,KAAK,SAAS/C,QAAQ,YAAYiD,SAAUnC,EAAU,SAAC,eAKrE,EC/GA,ECEqB,WACnB,OACE,SAACoC,EAAA,EAAO,WACN,SAAC,EAAY,KAGnB,C","sources":["components/Section/Section.styled.ts","components/Section/index.ts","components/Section/Section.tsx","pages/RegisterPage/RegisterForm/RegisterForm.tsx","pages/RegisterPage/index.ts","pages/RegisterPage/RegisterPage.tsx"],"sourcesContent":["import styled from \"styled-components\"\n\nexport const SectionStyled = styled.section`\n  padding: 100px 0;\n  min-height: 100vh;\n`\n","import Section from \"./Section\"\n\nexport default Section\n","import { Container, Typography } from \"@mui/material\"\nimport React, { ReactNode } from \"react\"\nimport { SectionStyled } from \"./Section.styled\"\ninterface ISection {\n  children: ReactNode\n  title?: string\n}\nconst Section: React.FC<ISection> = ({ children, title }) => {\n  return (\n    <SectionStyled>\n      <Container>\n        {title && (\n          <Typography\n            variant='h2'\n            sx={{ marginBottom: \"20px\", textAlign: \"center\" }}\n          >\n            {title}\n          </Typography>\n        )}\n        {children}\n      </Container>\n    </SectionStyled>\n  )\n}\n\nexport default Section\n","import React from \"react\"\nimport { TextField, Button, Box } from \"@mui/material\"\nimport { useFormik } from \"formik\"\nimport { useSelector } from \"react-redux\"\nimport * as yup from \"yup\"\nimport { useAppDispatch } from \"../../../hooks/useReduxWithType\"\nimport { register } from \"../../../redux/auth/authOperations\"\nimport { selectLoading } from \"../../../redux/auth/authSelectors\"\n\nconst validationSchema = yup.object({\n  name: yup.string().required(\"Name is required\"),\n  email: yup.string().email(\"Invalid email\").required(\"Email is required\"),\n  password: yup\n    .string()\n    .required(\"Password is required\")\n    .min(5, \"Password must be at least 5 characters\"),\n  // confirmPassword: yup\n  //   .string()\n  //   .oneOf([yup.ref('password')], 'Passwords must match')\n  //   .required('Confirm Password is required'),\n})\n\ninterface FormValues {\n  name: string\n  email: string\n  password: string\n  // confirmPassword: string\n}\n\nconst initialValues: FormValues = {\n  name: \"\",\n  email: \"\",\n  password: \"\",\n  // confirmPassword: '',\n}\n\nconst RegisterForm: React.FC = () => {\n  const dispatch = useAppDispatch()\n  const isLoading = useSelector(selectLoading)\n  const formik = useFormik({\n    initialValues,\n    validationSchema,\n    onSubmit: async (values) => {\n      dispatch(register(values))\n      formik.resetForm()\n    },\n  })\n\n  return (\n    <Box\n      component='form'\n      sx={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        gap: \"20px\",\n        width: { xs: \"100%\", sm: \"608px\" },\n        margin: \"0 auto\",\n        padding: \"20px\",\n      }}\n      onSubmit={formik.handleSubmit}\n    >\n      <TextField\n        id='name'\n        label='Name'\n        variant='outlined'\n        value={formik.values.name}\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        error={formik.touched.name && Boolean(formik.errors.name)}\n        helperText={formik.touched.name && formik.errors.name}\n      />\n      <TextField\n        id='email'\n        label='Email'\n        variant='outlined'\n        value={formik.values.email}\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        error={formik.touched.email && Boolean(formik.errors.email)}\n        helperText={formik.touched.email && formik.errors.email}\n      />\n      <TextField\n        id='password'\n        label='Password'\n        type='password'\n        variant='outlined'\n        value={formik.values.password}\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        error={formik.touched.password && Boolean(formik.errors.password)}\n        helperText={formik.touched.password && formik.errors.password}\n      />\n      {/* <TextField */}\n      {/*  id='confirmPassword' */}\n      {/*  label='Confirm Password' */}\n      {/*  type='password' */}\n      {/*  variant='outlined' */}\n      {/*  value={formik.values.confirmPassword} */}\n      {/*  onChange={formik.handleChange} */}\n      {/*  onBlur={formik.handleBlur} */}\n      {/*  error={ */}\n      {/*    formik.touched.confirmPassword && */}\n      {/*    Boolean(formik.errors.confirmPassword) */}\n      {/*  } */}\n      {/*  helperText={ */}\n      {/*    formik.touched.confirmPassword && formik.errors.confirmPassword */}\n      {/*  } */}\n      {/* /> */}\n      <Button type='submit' variant='contained' disabled={isLoading}>\n        Register\n      </Button>\n    </Box>\n  )\n}\n\nexport default RegisterForm\n","import RegisterPage from \"./RegisterPage\"\n\nexport default RegisterPage\n","import React from \"react\"\nimport Section from \"../../components/Section\"\nimport RegisterForm from \"./RegisterForm/RegisterForm\"\n\nconst RegisterPage = () => {\n  return (\n    <Section>\n      <RegisterForm />\n    </Section>\n  )\n}\n\nexport default RegisterPage\n"],"names":["SectionStyled","styled","children","title","Container","Typography","variant","sx","marginBottom","textAlign","validationSchema","yup","name","required","email","password","min","initialValues","dispatch","useAppDispatch","isLoading","useSelector","selectLoading","formik","useFormik","onSubmit","values","register","resetForm","Box","component","display","flexDirection","gap","width","xs","sm","margin","padding","handleSubmit","TextField","id","label","value","onChange","handleChange","onBlur","handleBlur","error","touched","Boolean","errors","helperText","type","Button","disabled","Section"],"sourceRoot":""}