{"version":3,"file":"static/js/417.0d492bb3.chunk.js","mappings":"uLAEaA,E,QAAgBC,GAAAA,QAAc,6C,SCA3C,ECKoC,SAAH,GAA6B,IAAvBC,EAAQ,EAARA,SAAUC,EAAK,EAALA,MAC/C,OACE,SAACH,EAAa,WACZ,UAACI,EAAA,EAAS,WACPD,IACC,SAACE,EAAA,EAAU,CACTC,QAAQ,KACRC,GAAI,CAAEC,aAAc,OAAQC,UAAW,UAAW,SAEjDN,IAGJD,MAIT,C,6KCrBaQ,E,QAAaT,GAAAA,KAAW,yI,SCI/BU,EAAmBC,EAAAA,GAAW,CAClCC,KAAMD,EAAAA,KAAaE,SAAS,oBAC5BC,MAAOH,EAAAA,KAAaG,MAAM,iBAAiBD,SAAS,qBACpDE,SAAUJ,EAAAA,KAEPE,SAAS,wBACTG,IAAI,EAAG,0CACVC,gBAAiBN,EAAAA,KAEdO,MAAM,CAACP,EAAAA,GAAQ,aAAc,wBAC7BE,SAAS,kCAURM,EAA4B,CAChCP,KAAM,GACNE,MAAO,GACPC,SAAU,GACVE,gBAAiB,IAwEnB,EArE+B,WAC7B,OAAwCG,EAAAA,EAAAA,WAAS,GAAM,eAAhDC,EAAY,KAAEC,EAAe,KAC9BC,GAASC,EAAAA,EAAAA,IAAU,CACvBL,cAAAA,EACAT,iBAAAA,EACAe,SAAS,WAAD,8BAAE,WAAOC,GAAM,sEACrBJ,GAAgB,GAEhBK,QAAQC,IAAI,eAAgBF,GAC5BJ,GAAgB,GAAM,2CACvB,mDALQ,KAQX,OACE,UAACb,EAAU,CAACgB,SAAUF,EAAOM,aAAa,WACxC,SAACC,EAAA,EAAS,CACRC,GAAG,OACHC,MAAM,OACN3B,QAAQ,WACR4B,MAAOV,EAAOG,OAAOd,KACrBsB,SAAUX,EAAOY,aACjBC,OAAQb,EAAOc,WACfC,MAAOf,EAAOgB,QAAQ3B,MAAQ4B,QAAQjB,EAAOkB,OAAO7B,MACpD8B,WAAYnB,EAAOgB,QAAQ3B,MAAQW,EAAOkB,OAAO7B,QAEnD,SAACkB,EAAA,EAAS,CACRC,GAAG,QACHC,MAAM,QACN3B,QAAQ,WACR4B,MAAOV,EAAOG,OAAOZ,MACrBoB,SAAUX,EAAOY,aACjBC,OAAQb,EAAOc,WACfC,MAAOf,EAAOgB,QAAQzB,OAAS0B,QAAQjB,EAAOkB,OAAO3B,OACrD4B,WAAYnB,EAAOgB,QAAQzB,OAASS,EAAOkB,OAAO3B,SAEpD,SAACgB,EAAA,EAAS,CACRC,GAAG,WACHC,MAAM,WACNW,KAAK,WACLtC,QAAQ,WACR4B,MAAOV,EAAOG,OAAOX,SACrBmB,SAAUX,EAAOY,aACjBC,OAAQb,EAAOc,WACfC,MAAOf,EAAOgB,QAAQxB,UAAYyB,QAAQjB,EAAOkB,OAAO1B,UACxD2B,WAAYnB,EAAOgB,QAAQxB,UAAYQ,EAAOkB,OAAO1B,YAEvD,SAACe,EAAA,EAAS,CACRC,GAAG,kBACHC,MAAM,mBACNW,KAAK,WACLtC,QAAQ,WACR4B,MAAOV,EAAOG,OAAOT,gBACrBiB,SAAUX,EAAOY,aACjBC,OAAQb,EAAOc,WACfC,MACEf,EAAOgB,QAAQtB,iBACfuB,QAAQjB,EAAOkB,OAAOxB,iBAExByB,WACEnB,EAAOgB,QAAQtB,iBAAmBM,EAAOkB,OAAOxB,mBAGpD,SAAC2B,EAAA,EAAM,CAACD,KAAK,SAAStC,QAAQ,YAAYwC,SAAUxB,EAAa,SAAC,eAKxE,EClGA,ECEqB,WACnB,OACE,SAACyB,EAAA,EAAO,WACN,SAAC,EAAY,KAGnB,C","sources":["components/Section/Section.styled.ts","components/Section/index.ts","components/Section/Section.tsx","pages/RegisterPage/RegisterForm/RegisterForm.styled.ts","pages/RegisterPage/RegisterForm/RegisterForm.tsx","pages/RegisterPage/index.ts","pages/RegisterPage/RegisterPage.tsx"],"sourcesContent":["import styled from 'styled-components'\n\nexport const SectionStyled = styled.section`\n  padding: 100px 0;\n`\n","import Section from './Section'\n\nexport default Section\n","import { Container, Typography } from '@mui/material'\nimport React, { ReactNode } from 'react'\nimport { SectionStyled } from './Section.styled'\ninterface ISection {\n  children: ReactNode\n  title?: string\n}\nconst Section: React.FC<ISection> = ({ children, title }) => {\n  return (\n    <SectionStyled>\n      <Container>\n        {title && (\n          <Typography\n            variant='h2'\n            sx={{ marginBottom: '20px', textAlign: 'center' }}\n          >\n            {title}\n          </Typography>\n        )}\n        {children}\n      </Container>\n    </SectionStyled>\n  )\n}\n\nexport default Section\n","import styled from 'styled-components'\n\nexport const StyledForm = styled.form`\n  width: 608px;\n  margin: 0 auto;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n`\n","import React, { useState } from 'react'\nimport { TextField, Button } from '@mui/material'\nimport { useFormik } from 'formik'\nimport * as yup from 'yup'\nimport { StyledForm } from './RegisterForm.styled'\n\nconst validationSchema = yup.object({\n  name: yup.string().required('Name is required'),\n  email: yup.string().email('Invalid email').required('Email is required'),\n  password: yup\n    .string()\n    .required('Password is required')\n    .min(8, 'Password must be at least 8 characters'),\n  confirmPassword: yup\n    .string()\n    .oneOf([yup.ref('password')], 'Passwords must match')\n    .required('Confirm Password is required'),\n})\n\ninterface FormValues {\n  name: string\n  email: string\n  password: string\n  confirmPassword: string\n}\n\nconst initialValues: FormValues = {\n  name: '',\n  email: '',\n  password: '',\n  confirmPassword: '',\n}\n\nconst RegisterForm: React.FC = () => {\n  const [isSubmitting, setIsSubmitting] = useState(false)\n  const formik = useFormik({\n    initialValues,\n    validationSchema,\n    onSubmit: async (values) => {\n      setIsSubmitting(true)\n      // Submit the form data to the server here\n      console.log('Form values:', values)\n      setIsSubmitting(false)\n    },\n  })\n\n  return (\n    <StyledForm onSubmit={formik.handleSubmit}>\n      <TextField\n        id='name'\n        label='Name'\n        variant='outlined'\n        value={formik.values.name}\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        error={formik.touched.name && Boolean(formik.errors.name)}\n        helperText={formik.touched.name && formik.errors.name}\n      />\n      <TextField\n        id='email'\n        label='Email'\n        variant='outlined'\n        value={formik.values.email}\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        error={formik.touched.email && Boolean(formik.errors.email)}\n        helperText={formik.touched.email && formik.errors.email}\n      />\n      <TextField\n        id='password'\n        label='Password'\n        type='password'\n        variant='outlined'\n        value={formik.values.password}\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        error={formik.touched.password && Boolean(formik.errors.password)}\n        helperText={formik.touched.password && formik.errors.password}\n      />\n      <TextField\n        id='confirmPassword'\n        label='Confirm Password'\n        type='password'\n        variant='outlined'\n        value={formik.values.confirmPassword}\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        error={\n          formik.touched.confirmPassword &&\n          Boolean(formik.errors.confirmPassword)\n        }\n        helperText={\n          formik.touched.confirmPassword && formik.errors.confirmPassword\n        }\n      />\n      <Button type='submit' variant='contained' disabled={isSubmitting}>\n        Register\n      </Button>\n    </StyledForm>\n  )\n}\n\nexport default RegisterForm\n","import RegisterPage from './RegisterPage'\n\nexport default RegisterPage\n","import React from 'react'\nimport Section from '../../components/Section'\nimport RegisterForm from './RegisterForm/RegisterForm'\n\nconst RegisterPage = () => {\n  return (\n    <Section>\n      <RegisterForm />\n    </Section>\n  )\n}\n\nexport default RegisterPage\n"],"names":["SectionStyled","styled","children","title","Container","Typography","variant","sx","marginBottom","textAlign","StyledForm","validationSchema","yup","name","required","email","password","min","confirmPassword","oneOf","initialValues","useState","isSubmitting","setIsSubmitting","formik","useFormik","onSubmit","values","console","log","handleSubmit","TextField","id","label","value","onChange","handleChange","onBlur","handleBlur","error","touched","Boolean","errors","helperText","type","Button","disabled","Section"],"sourceRoot":""}