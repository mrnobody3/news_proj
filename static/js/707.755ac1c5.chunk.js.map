{"version":3,"file":"static/js/707.755ac1c5.chunk.js","mappings":"uLAEaA,E,QAAgBC,GAAAA,QAAc,mE,SCA3C,ECKoC,SAAH,GAA6B,IAAvBC,EAAQ,EAARA,SAAUC,EAAK,EAALA,MAC/C,OACE,SAACH,EAAa,WACZ,UAACI,EAAA,EAAS,WACPD,IACC,SAACE,EAAA,EAAU,CACTC,QAAQ,KACRC,GAAI,CAAEC,aAAc,OAAQC,UAAW,UAAW,SAEjDN,IAGJD,MAIT,C,oOCpBaQ,EAAmB,SAACC,GAC/B,OAAOC,EAAAA,GAAW,CAChBC,KAAMD,EAAAA,KAAaE,SAAS,GAAD,OAAIH,EAAE,oCACjCI,MAAOH,EAAAA,KAEJG,MAAM,GAAD,OAAIJ,EAAE,oCACXG,SAAS,GAAD,OAAIH,EAAE,qCACjBK,SAAUJ,EAAAA,KAEPE,SAAS,GAAD,OAAIH,EAAE,yCAErB,E,SCQMM,EAA4B,CAChCJ,KAAM,GACNE,MAAO,GACPC,SAAU,IA6FZ,EAzF+B,WAC7B,IAAME,GAAWC,EAAAA,EAAAA,KACXC,GAAYC,EAAAA,EAAAA,IAAYC,EAAAA,IACxBC,GAAQF,EAAAA,EAAAA,IAAYG,EAAAA,IAClBb,GAAMc,EAAAA,EAAAA,MAANd,EAEFe,GAASC,EAAAA,EAAAA,IAAU,CACvBV,cAAAA,EACAP,iBAAkBA,EAAiBC,GACnCiB,SAAS,WAAD,8BAAE,WAAOC,GAAM,sEAEf,GADNX,GAASY,EAAAA,EAAAA,IAASD,IAAQ,MACzBN,GAAK,qCAAWG,EAAOK,YAAW,2CACpC,mDAHQ,KAMX,OACE,UAACC,EAAA,EAAG,CACFC,UAAU,OACV1B,GAAI,CACF2B,QAAS,OACTC,cAAe,SACfC,IAAK,OACLC,MAAO,CAAEC,GAAI,OAAQC,GAAI,SACzBC,OAAQ,SACRC,QAAS,QAEXb,SAAUF,EAAOgB,aAAa,WAE9B,SAACC,EAAA,EAAS,CACRC,GAAG,OACHC,MAAM,OACNvC,QAAQ,WACRwC,MAAOpB,EAAOG,OAAOhB,KACrBkC,SAAUrB,EAAOsB,aACjBC,OAAQvB,EAAOwB,WACf3B,MAAOG,EAAOyB,QAAQtC,MAAQuC,QAAQ1B,EAAO2B,OAAOxC,MACpDyC,WAAY5B,EAAOyB,QAAQtC,MAAQa,EAAO2B,OAAOxC,QAEnD,SAAC8B,EAAA,EAAS,CACRC,GAAG,QACHC,MAAM,QACNvC,QAAQ,WACRwC,MAAOpB,EAAOG,OAAOd,MACrBgC,SAAUrB,EAAOsB,aACjBC,OAAQvB,EAAOwB,WACf3B,MAAOG,EAAOyB,QAAQpC,OAASqC,QAAQ1B,EAAO2B,OAAOtC,OACrDuC,WAAY5B,EAAOyB,QAAQpC,OAASW,EAAO2B,OAAOtC,SAEpD,SAAC4B,EAAA,EAAS,CACRC,GAAG,WACHC,MAAM,WACNU,KAAK,WACLjD,QAAQ,WACRwC,MAAOpB,EAAOG,OAAOb,SACrB+B,SAAUrB,EAAOsB,aACjBC,OAAQvB,EAAOwB,WACf3B,MAAOG,EAAOyB,QAAQnC,UAAYoC,QAAQ1B,EAAO2B,OAAOrC,UACxDsC,WAAY5B,EAAOyB,QAAQnC,UAAYU,EAAO2B,OAAOrC,YAmBvD,SAACwC,EAAA,EAAM,CAACD,KAAK,SAASjD,QAAQ,YAAYmD,SAAUrC,EAAU,SAAC,cAG/D,UAACf,EAAA,EAAU,CAACqD,MAAM,SAASpD,QAAQ,KAAKqD,GAAI,EAAE,UAAC,0BACrB,KACxB,SAAC,KAAI,CAACC,MAAO,CAAEC,MAAO,UAAWC,WAAY,KAAOC,GAAI,SAAS,SAAC,iBAM1E,EClHA,ECEqB,WACnB,OACE,SAACC,EAAA,EAAO,WACN,SAAC,EAAY,KAGnB,C","sources":["components/Section/Section.styled.ts","components/Section/index.ts","components/Section/Section.tsx","pages/RegisterPage/RegisterForm/registerSchema.ts","pages/RegisterPage/RegisterForm/RegisterForm.tsx","pages/RegisterPage/index.ts","pages/RegisterPage/RegisterPage.tsx"],"sourcesContent":["import styled from \"styled-components\"\n\nexport const SectionStyled = styled.section`\n  padding: 100px 0;\n  min-height: 100vh;\n`\n","import Section from \"./Section\"\n\nexport default Section\n","import { Container, Typography } from \"@mui/material\"\nimport React, { ReactNode } from \"react\"\nimport { SectionStyled } from \"./Section.styled\"\ninterface ISection {\n  children: ReactNode\n  title?: string\n}\nconst Section: React.FC<ISection> = ({ children, title }) => {\n  return (\n    <SectionStyled>\n      <Container>\n        {title && (\n          <Typography\n            variant='h2'\n            sx={{ marginBottom: \"20px\", textAlign: \"center\" }}\n          >\n            {title}\n          </Typography>\n        )}\n        {children}\n      </Container>\n    </SectionStyled>\n  )\n}\n\nexport default Section\n","import { TFunction } from \"i18next\"\nimport * as yup from \"yup\"\n\nexport const validationSchema = (t: TFunction<\"translation\", undefined>) => {\n  return yup.object({\n    name: yup.string().required(`${t(\"registerpage.yup.name.required\")}`),\n    email: yup\n      .string()\n      .email(`${t(\"registerpage.yup.email.invalid\")}`)\n      .required(`${t(\"registerpage.yup.email.required\")}`),\n    password: yup\n      .string()\n      .required(`${t(\"registerpage.yup.password.required\")}`),\n  })\n}\n","import { Box, Button, TextField, Typography } from \"@mui/material\"\nimport { useFormik } from \"formik\"\nimport React from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport { useSelector } from \"react-redux\"\nimport { Link } from \"react-router-dom\"\n\nimport { useAppDispatch } from \"../../../hooks/useReduxWithType\"\nimport { register } from \"../../../redux/auth/authOperations\"\nimport {\n  selectErrorAuth,\n  selectLoading,\n} from \"../../../redux/auth/authSelectors\"\nimport { validationSchema } from \"./registerSchema\"\n\ninterface FormValues {\n  name: string\n  email: string\n  password: string\n  // confirmPassword: string\n}\n\nconst initialValues: FormValues = {\n  name: \"\",\n  email: \"\",\n  password: \"\",\n  // confirmPassword: '',\n}\n\nconst RegisterForm: React.FC = () => {\n  const dispatch = useAppDispatch()\n  const isLoading = useSelector(selectLoading)\n  const error = useSelector(selectErrorAuth)\n  const { t } = useTranslation()\n\n  const formik = useFormik({\n    initialValues,\n    validationSchema: validationSchema(t),\n    onSubmit: async (values) => {\n      dispatch(register(values))\n      !error && (await formik.resetForm())\n    },\n  })\n\n  return (\n    <Box\n      component='form'\n      sx={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        gap: \"20px\",\n        width: { xs: \"100%\", sm: \"608px\" },\n        margin: \"0 auto\",\n        padding: \"20px\",\n      }}\n      onSubmit={formik.handleSubmit}\n    >\n      <TextField\n        id='name'\n        label='Name'\n        variant='outlined'\n        value={formik.values.name}\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        error={formik.touched.name && Boolean(formik.errors.name)}\n        helperText={formik.touched.name && formik.errors.name}\n      />\n      <TextField\n        id='email'\n        label='Email'\n        variant='outlined'\n        value={formik.values.email}\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        error={formik.touched.email && Boolean(formik.errors.email)}\n        helperText={formik.touched.email && formik.errors.email}\n      />\n      <TextField\n        id='password'\n        label='Password'\n        type='password'\n        variant='outlined'\n        value={formik.values.password}\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        error={formik.touched.password && Boolean(formik.errors.password)}\n        helperText={formik.touched.password && formik.errors.password}\n      />\n      {/* <TextField */}\n      {/*  id='confirmPassword' */}\n      {/*  label='Confirm Password' */}\n      {/*  type='password' */}\n      {/*  variant='outlined' */}\n      {/*  value={formik.values.confirmPassword} */}\n      {/*  onChange={formik.handleChange} */}\n      {/*  onBlur={formik.handleBlur} */}\n      {/*  error={ */}\n      {/*    formik.touched.confirmPassword && */}\n      {/*    Boolean(formik.errors.confirmPassword) */}\n      {/*  } */}\n      {/*  helperText={ */}\n      {/*    formik.touched.confirmPassword && formik.errors.confirmPassword */}\n      {/*  } */}\n      {/* /> */}\n\n      <Button type='submit' variant='contained' disabled={isLoading}>\n        Register\n      </Button>\n      <Typography align='center' variant='h5' mt={2}>\n        Do you have an account?{\" \"}\n        <Link style={{ color: \"#272343\", fontWeight: 700 }} to={\"/login\"}>\n          Sign in\n        </Link>\n      </Typography>\n    </Box>\n  )\n}\n\nexport default RegisterForm\n","import RegisterPage from \"./RegisterPage\"\n\nexport default RegisterPage\n","import React from \"react\"\nimport Section from \"../../components/Section\"\nimport RegisterForm from \"./RegisterForm/RegisterForm\"\n\nconst RegisterPage = () => {\n  return (\n    <Section>\n      <RegisterForm />\n    </Section>\n  )\n}\n\nexport default RegisterPage\n"],"names":["SectionStyled","styled","children","title","Container","Typography","variant","sx","marginBottom","textAlign","validationSchema","t","yup","name","required","email","password","initialValues","dispatch","useAppDispatch","isLoading","useSelector","selectLoading","error","selectErrorAuth","useTranslation","formik","useFormik","onSubmit","values","register","resetForm","Box","component","display","flexDirection","gap","width","xs","sm","margin","padding","handleSubmit","TextField","id","label","value","onChange","handleChange","onBlur","handleBlur","touched","Boolean","errors","helperText","type","Button","disabled","align","mt","style","color","fontWeight","to","Section"],"sourceRoot":""}