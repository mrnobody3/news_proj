{"version":3,"file":"static/js/248.7b213bcc.chunk.js","mappings":"uLAEaA,E,QAAgBC,GAAAA,QAAc,6C,SCA3C,ECKoC,SAAH,GAA6B,IAAvBC,EAAQ,EAARA,SAAUC,EAAK,EAALA,MAC/C,OACE,SAACH,EAAa,WACZ,UAACI,EAAA,EAAS,WACPD,IACC,SAACE,EAAA,EAAU,CACTC,QAAQ,KACRC,GAAI,CAAEC,aAAc,OAAQC,UAAW,UAAW,SAEjDN,IAGJD,MAIT,C,oECpBaQ,EAAiB,WAAH,OAASC,EAAAA,EAAAA,KAA0B,C,gNCMxDC,EAAmBC,EAAAA,GAAW,CAClCC,MAAOD,EAAAA,KAAaC,MAAM,iBAAiBC,SAAS,qBACpDC,SAAUH,EAAAA,KAAaE,SAAS,0BAQ5BE,EAA4B,CAChCH,MAAO,GACPE,SAAU,IAuDZ,EApD4B,WAC1B,IAAME,GAAWR,EAAAA,EAAAA,KACXS,GAAYC,EAAAA,EAAAA,IAAYC,EAAAA,IACxBC,GAASC,EAAAA,EAAAA,IAAU,CACvBN,cAAAA,EACAL,iBAAAA,EACAY,SAAS,WAAD,8BAAE,WAAOC,GAAM,sEACrBP,GAASQ,EAAAA,EAAAA,GAAMD,IAAQ,2CACxB,mDAFQ,KAKX,OACE,UAACE,EAAA,EAAG,CACFC,UAAU,OACVrB,GAAI,CACFsB,QAAS,OACTC,cAAe,SACfC,IAAK,OACLC,MAAO,QACPC,OAAQ,SACRC,QAAS,QAEXV,SAAUF,EAAOa,aAAa,WAE9B,SAACC,EAAA,EAAS,CACRC,GAAG,QACHC,MAAM,QACNhC,QAAQ,WACRiC,MAAOjB,EAAOG,OAAOX,MACrB0B,SAAUlB,EAAOmB,aACjBC,OAAQpB,EAAOqB,WACfC,MAAOtB,EAAOuB,QAAQ/B,OAASgC,QAAQxB,EAAOyB,OAAOjC,OACrDkC,WAAY1B,EAAOuB,QAAQ/B,OAASQ,EAAOyB,OAAOjC,SAEpD,SAACsB,EAAA,EAAS,CACRC,GAAG,WACHC,MAAM,WACNW,KAAK,WACL3C,QAAQ,WACRiC,MAAOjB,EAAOG,OAAOT,SACrBwB,SAAUlB,EAAOmB,aACjBC,OAAQpB,EAAOqB,WACfC,MAAOtB,EAAOuB,QAAQ7B,UAAY8B,QAAQxB,EAAOyB,OAAO/B,UACxDgC,WAAY1B,EAAOuB,QAAQ7B,UAAYM,EAAOyB,OAAO/B,YAEvD,SAACkC,EAAA,EAAM,CAACD,KAAK,SAAS3C,QAAQ,YAAY6C,SAAUhC,EAAU,SAAC,YAKrE,ECxEA,ICAA,ECEkB,WAChB,OACE,SAACiC,EAAA,EAAO,WACN,SAAC,EAAS,KAGhB,C,wDCRO,IAYM/B,EAAgB,SAACgC,GAAgB,OAAKA,EAAMC,KAAKC,OAAO,C","sources":["components/Section/Section.styled.ts","components/Section/index.ts","components/Section/Section.tsx","hooks/useReduxWithType.ts","pages/LoginPage/LoginForm/LoginForm.tsx","pages/LoginPage/LoginForm/index.ts","pages/LoginPage/index.ts","pages/LoginPage/LoginPage.tsx","redux/auth/authSelectors.ts"],"sourcesContent":["import styled from 'styled-components'\n\nexport const SectionStyled = styled.section`\n  padding: 100px 0;\n`\n","import Section from './Section'\n\nexport default Section\n","import { Container, Typography } from '@mui/material'\nimport React, { ReactNode } from 'react'\nimport { SectionStyled } from './Section.styled'\ninterface ISection {\n  children: ReactNode\n  title?: string\n}\nconst Section: React.FC<ISection> = ({ children, title }) => {\n  return (\n    <SectionStyled>\n      <Container>\n        {title && (\n          <Typography\n            variant='h2'\n            sx={{ marginBottom: '20px', textAlign: 'center' }}\n          >\n            {title}\n          </Typography>\n        )}\n        {children}\n      </Container>\n    </SectionStyled>\n  )\n}\n\nexport default Section\n","import { useDispatch, useSelector, TypedUseSelectorHook } from 'react-redux'\nimport type { RootState, AppDispatch } from '../redux/store'\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector\n","import React from 'react'\nimport { TextField, Button, Box } from '@mui/material'\nimport { useFormik } from 'formik'\nimport { useSelector } from 'react-redux'\nimport * as yup from 'yup'\nimport { useAppDispatch } from '../../../hooks/useReduxWithType'\nimport { login } from '../../../redux/auth/authOperations'\nimport { selectLoading } from '../../../redux/auth/authSelectors'\n\nconst validationSchema = yup.object({\n  email: yup.string().email('Invalid email').required('Email is required'),\n  password: yup.string().required('Password is required'),\n})\n\ninterface FormValues {\n  email: string\n  password: string\n}\n\nconst initialValues: FormValues = {\n  email: '',\n  password: '',\n}\n\nconst LoginForm: React.FC = () => {\n  const dispatch = useAppDispatch()\n  const isLoading = useSelector(selectLoading)\n  const formik = useFormik({\n    initialValues,\n    validationSchema,\n    onSubmit: async (values) => {\n      dispatch(login(values))\n    },\n  })\n\n  return (\n    <Box\n      component='form'\n      sx={{\n        display: 'flex',\n        flexDirection: 'column',\n        gap: '20px',\n        width: '608px',\n        margin: '0 auto',\n        padding: '20px',\n      }}\n      onSubmit={formik.handleSubmit}\n    >\n      <TextField\n        id='email'\n        label='Email'\n        variant='outlined'\n        value={formik.values.email}\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        error={formik.touched.email && Boolean(formik.errors.email)}\n        helperText={formik.touched.email && formik.errors.email}\n      />\n      <TextField\n        id='password'\n        label='Password'\n        type='password'\n        variant='outlined'\n        value={formik.values.password}\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        error={formik.touched.password && Boolean(formik.errors.password)}\n        helperText={formik.touched.password && formik.errors.password}\n      />\n      <Button type='submit' variant='contained' disabled={isLoading}>\n        Login\n      </Button>\n    </Box>\n  )\n}\n\nexport default LoginForm\n","import LoginForm from './LoginForm'\n\nexport default LoginForm\n","import LoginPage from './LoginPage'\n\nexport default LoginPage\n","import React from 'react'\nimport Section from '../../components/Section'\nimport LoginForm from './LoginForm'\n\nconst LoginPage = () => {\n  return (\n    <Section>\n      <LoginForm />\n    </Section>\n  )\n}\n\nexport default LoginPage\n","import { RootState } from '../store'\n\nexport const selectUserName = (state: RootState) => state.auth.user.name\n\nexport const selectToken = (state: RootState) => state.auth.token\n\nexport const selectIsLoggedIn = (state: RootState) => state.auth.isLoggedIn\n\nexport const selectErrorAuth = (state: RootState) => state.auth.error\n\nexport const selectAvatarUser = (state: RootState) => state.auth.user.avatarUrl\n\nexport const selectUserData = (state: RootState) => state.auth.user\n\nexport const selectLoading = (state: RootState) => state.auth.loading\n"],"names":["SectionStyled","styled","children","title","Container","Typography","variant","sx","marginBottom","textAlign","useAppDispatch","useDispatch","validationSchema","yup","email","required","password","initialValues","dispatch","isLoading","useSelector","selectLoading","formik","useFormik","onSubmit","values","login","Box","component","display","flexDirection","gap","width","margin","padding","handleSubmit","TextField","id","label","value","onChange","handleChange","onBlur","handleBlur","error","touched","Boolean","errors","helperText","type","Button","disabled","Section","state","auth","loading"],"sourceRoot":""}